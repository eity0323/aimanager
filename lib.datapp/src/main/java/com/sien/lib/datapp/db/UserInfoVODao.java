package com.sien.lib.datapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.sien.lib.datapp.beans.UserInfoVO;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO_VO".
*/
public class UserInfoVODao extends AbstractDao<UserInfoVO, Long> {

    public static final String TABLENAME = "USER_INFO_VO";

    /**
     * Properties of entity UserInfoVO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property UserPwd = new Property(2, String.class, "userPwd", false, "USER_PWD");
        public final static Property RealName = new Property(3, String.class, "realName", false, "REAL_NAME");
        public final static Property Avatar = new Property(4, String.class, "avatar", false, "AVATAR");
        public final static Property Mobile = new Property(5, String.class, "mobile", false, "MOBILE");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property BindMobile = new Property(7, Boolean.class, "bindMobile", false, "BIND_MOBILE");
        public final static Property BindEmail = new Property(8, Boolean.class, "bindEmail", false, "BIND_EMAIL");
        public final static Property DevicePwd = new Property(9, Boolean.class, "devicePwd", false, "DEVICE_PWD");
    }


    public UserInfoVODao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoVODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO_VO\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"USER_PWD\" TEXT," + // 2: userPwd
                "\"REAL_NAME\" TEXT," + // 3: realName
                "\"AVATAR\" TEXT," + // 4: avatar
                "\"MOBILE\" TEXT," + // 5: mobile
                "\"EMAIL\" TEXT," + // 6: email
                "\"BIND_MOBILE\" INTEGER," + // 7: bindMobile
                "\"BIND_EMAIL\" INTEGER," + // 8: bindEmail
                "\"DEVICE_PWD\" INTEGER);"); // 9: devicePwd
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO_VO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoVO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userPwd = entity.getUserPwd();
        if (userPwd != null) {
            stmt.bindString(3, userPwd);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(4, realName);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        Boolean bindMobile = entity.getBindMobile();
        if (bindMobile != null) {
            stmt.bindLong(8, bindMobile ? 1L: 0L);
        }
 
        Boolean bindEmail = entity.getBindEmail();
        if (bindEmail != null) {
            stmt.bindLong(9, bindEmail ? 1L: 0L);
        }
 
        Boolean devicePwd = entity.getDevicePwd();
        if (devicePwd != null) {
            stmt.bindLong(10, devicePwd ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoVO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userPwd = entity.getUserPwd();
        if (userPwd != null) {
            stmt.bindString(3, userPwd);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(4, realName);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        Boolean bindMobile = entity.getBindMobile();
        if (bindMobile != null) {
            stmt.bindLong(8, bindMobile ? 1L: 0L);
        }
 
        Boolean bindEmail = entity.getBindEmail();
        if (bindEmail != null) {
            stmt.bindLong(9, bindEmail ? 1L: 0L);
        }
 
        Boolean devicePwd = entity.getDevicePwd();
        if (devicePwd != null) {
            stmt.bindLong(10, devicePwd ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfoVO readEntity(Cursor cursor, int offset) {
        UserInfoVO entity = new UserInfoVO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userPwd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // realName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatar
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mobile
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // bindMobile
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // bindEmail
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // devicePwd
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoVO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserPwd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRealName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMobile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBindMobile(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setBindEmail(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setDevicePwd(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfoVO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfoVO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfoVO entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
