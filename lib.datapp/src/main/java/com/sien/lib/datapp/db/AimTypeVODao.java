package com.sien.lib.datapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.sien.lib.datapp.beans.AimTypeVO;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AIM_TYPE_VO".
*/
public class AimTypeVODao extends AbstractDao<AimTypeVO, Long> {

    public static final String TABLENAME = "AIM_TYPE_VO";

    /**
     * Properties of entity AimTypeVO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property TypeName = new Property(1, String.class, "typeName", false, "TYPE_NAME");
        public final static Property Desc = new Property(2, String.class, "desc", false, "DESC");
        public final static Property Customed = new Property(3, Boolean.class, "customed", false, "CUSTOMED");
        public final static Property Recyclable = new Property(4, Boolean.class, "recyclable", false, "RECYCLABLE");
        public final static Property Priority = new Property(5, Integer.class, "priority", false, "PRIORITY");
        public final static Property Period = new Property(6, Integer.class, "period", false, "PERIOD");
        public final static Property TargetPeriod = new Property(7, Integer.class, "targetPeriod", false, "TARGET_PERIOD");
        public final static Property FinishStatus = new Property(8, Integer.class, "finishStatus", false, "FINISH_STATUS");
        public final static Property FinishPercent = new Property(9, Integer.class, "finishPercent", false, "FINISH_PERCENT");
        public final static Property StartTime = new Property(10, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(11, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property ModifyTime = new Property(12, java.util.Date.class, "modifyTime", false, "MODIFY_TIME");
        public final static Property Cover = new Property(13, String.class, "cover", false, "COVER");
    }


    public AimTypeVODao(DaoConfig config) {
        super(config);
    }
    
    public AimTypeVODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AIM_TYPE_VO\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE_NAME\" TEXT," + // 1: typeName
                "\"DESC\" TEXT," + // 2: desc
                "\"CUSTOMED\" INTEGER," + // 3: customed
                "\"RECYCLABLE\" INTEGER," + // 4: recyclable
                "\"PRIORITY\" INTEGER," + // 5: priority
                "\"PERIOD\" INTEGER," + // 6: period
                "\"TARGET_PERIOD\" INTEGER," + // 7: targetPeriod
                "\"FINISH_STATUS\" INTEGER," + // 8: finishStatus
                "\"FINISH_PERCENT\" INTEGER," + // 9: finishPercent
                "\"START_TIME\" INTEGER," + // 10: startTime
                "\"END_TIME\" INTEGER," + // 11: endTime
                "\"MODIFY_TIME\" INTEGER," + // 12: modifyTime
                "\"COVER\" TEXT);"); // 13: cover
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AIM_TYPE_VO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AimTypeVO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(2, typeName);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(3, desc);
        }
 
        Boolean customed = entity.getCustomed();
        if (customed != null) {
            stmt.bindLong(4, customed ? 1L: 0L);
        }
 
        Boolean recyclable = entity.getRecyclable();
        if (recyclable != null) {
            stmt.bindLong(5, recyclable ? 1L: 0L);
        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(6, priority);
        }
 
        Integer period = entity.getPeriod();
        if (period != null) {
            stmt.bindLong(7, period);
        }
 
        Integer targetPeriod = entity.getTargetPeriod();
        if (targetPeriod != null) {
            stmt.bindLong(8, targetPeriod);
        }
 
        Integer finishStatus = entity.getFinishStatus();
        if (finishStatus != null) {
            stmt.bindLong(9, finishStatus);
        }
 
        Integer finishPercent = entity.getFinishPercent();
        if (finishPercent != null) {
            stmt.bindLong(10, finishPercent);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(11, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(12, endTime.getTime());
        }
 
        java.util.Date modifyTime = entity.getModifyTime();
        if (modifyTime != null) {
            stmt.bindLong(13, modifyTime.getTime());
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(14, cover);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AimTypeVO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(2, typeName);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(3, desc);
        }
 
        Boolean customed = entity.getCustomed();
        if (customed != null) {
            stmt.bindLong(4, customed ? 1L: 0L);
        }
 
        Boolean recyclable = entity.getRecyclable();
        if (recyclable != null) {
            stmt.bindLong(5, recyclable ? 1L: 0L);
        }
 
        Integer priority = entity.getPriority();
        if (priority != null) {
            stmt.bindLong(6, priority);
        }
 
        Integer period = entity.getPeriod();
        if (period != null) {
            stmt.bindLong(7, period);
        }
 
        Integer targetPeriod = entity.getTargetPeriod();
        if (targetPeriod != null) {
            stmt.bindLong(8, targetPeriod);
        }
 
        Integer finishStatus = entity.getFinishStatus();
        if (finishStatus != null) {
            stmt.bindLong(9, finishStatus);
        }
 
        Integer finishPercent = entity.getFinishPercent();
        if (finishPercent != null) {
            stmt.bindLong(10, finishPercent);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(11, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(12, endTime.getTime());
        }
 
        java.util.Date modifyTime = entity.getModifyTime();
        if (modifyTime != null) {
            stmt.bindLong(13, modifyTime.getTime());
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(14, cover);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AimTypeVO readEntity(Cursor cursor, int offset) {
        AimTypeVO entity = new AimTypeVO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // typeName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // desc
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // customed
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // recyclable
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // priority
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // period
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // targetPeriod
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // finishStatus
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // finishPercent
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // startTime
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // endTime
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // modifyTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // cover
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AimTypeVO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCustomed(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setRecyclable(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setPriority(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPeriod(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTargetPeriod(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setFinishStatus(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setFinishPercent(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setStartTime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setEndTime(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setModifyTime(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setCover(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AimTypeVO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AimTypeVO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AimTypeVO entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
